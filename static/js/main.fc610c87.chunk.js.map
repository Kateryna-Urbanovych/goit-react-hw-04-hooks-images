{"version":3,"sources":["components/Modal/Modal.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Searchbar/Searchbar.module.css","components/ImageGallery/ImageGallery.module.css","components/Button/Button.module.css","components/LoaderSpinner/LoaderSpinner.module.css","servises/pixabay-api.js","components/Searchbar/Searchbar.js","components/SearchForm/SearchForm.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/LoaderSpinner/LoaderSpinner.js","App.js","index.js","components/SearchForm/SearchForm.module.css"],"names":["module","exports","fetchImage","imageValue","page","fetch","then","response","ok","json","Promise","reject","Error","pixabayAPI","propTypes","PropTypes","string","isRequired","number","Searchbar","children","className","s","SearchForm","onSubmit","useState","setImageValue","event","preventDefault","trim","toast","info","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","value","onChange","target","toLowerCase","modalRoot","document","querySelector","Modal","onClose","tag","largeImageURL","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","Overlay","onClick","currentTarget","src","alt","ImageGalleryItem","webformatURL","showModal","setShowModal","toggleModal","state","ImageGalleryItemImage","ImageGallery","images","map","id","Button","LoaderSpinner","color","height","width","loaderSpinner","Status","App","status","setStatus","setImages","setPage","error","setError","hits","length","catch","finally","scroll","scrollTo","top","documentElement","scrollHeight","behavior","message","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc610c87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__jQuRS\",\"Modal\":\"Modal_Modal__38inO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__xCmkg\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__11nuw\",\"ImageGalleryItem-image\":\"ImageGalleryItem_ImageGalleryItem-image__2lvA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__ceTJF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__3CFao\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__jaRkx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderSpinner\":\"LoaderSpinner_loaderSpinner__2f_hA\"};","import PropTypes from 'prop-types';\n\nconst KEY = '18986249-8b68234fd669e826bdba5acf0';\n\nfunction fetchImage(imageValue, page) {\n    return fetch(\n        `https://pixabay.com/api/?q=${imageValue}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`,\n    ).then(response => {\n        if (response.ok) {\n            return response.json();\n        }\n        return Promise.reject(\n            new Error(`No images found on request ${imageValue}`),\n        );\n    });\n}\n\nconst pixabayAPI = {\n    fetchImage,\n};\n\nfetchImage.propTypes = {\n    imageValue: PropTypes.string.isRequired,\n    page: PropTypes.number.isRequired,\n};\n\nexport default pixabayAPI;\n","import PropTypes from 'prop-types';\nimport s from './Searchbar.module.css';\n\nexport default function Searchbar({ children }) {\n    return <header className={s.Searchbar}>{children}</header>;\n}\n\nSearchbar.propTypes = {\n    children: PropTypes.node,\n};\n","import { useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './SearchForm.module.css';\n\nexport default function SearchForm({ onSubmit }) {\n    const [imageValue, setImageValue] = useState('');\n\n    const handleImageValueChange = ({ target }) => {\n        setImageValue(target.value.toLowerCase());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (imageValue.trim() === '') {\n            return toast.info('Please, write some request');\n        }\n\n        onSubmit(imageValue);\n        // По превью дз запрос остается!!!\n        // setImageValue('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.SearchForm}>\n            <button type=\"submit\" className={s.SearchFormButton}>\n                <span className={s.SearchFormButtonLabel}>Search</span>\n            </button>\n\n            <input\n                className={s.SearchFormInput}\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search images and photos\"\n                value={imageValue}\n                onChange={handleImageValueChange}\n            />\n        </form>\n    );\n}\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n\n// OLD CLASS\n// class SearchForm extends PureComponent {\n//     state = {\n//         imageValue: '',\n//     };\n\n//     handleImageValueChange = event => {\n//         this.setState({ imageValue: event.currentTarget.value.toLowerCase() });\n//     };\n\n//     handleSubmit = event => {\n//         event.preventDefault();\n\n//         if (this.state.imageValue.trim() === '') {\n//             return toast.info('Please, write some request');\n//         }\n\n//         this.props.onSubmit(this.state.imageValue);\n//         // По превью дз запрос остается!!!\n//         // this.setState({ imageValue: '' });\n//     };\n\n//     render() {\n//         return (\n//             <form onSubmit={this.handleSubmit} className={s.SearchForm}>\n//                 <button type=\"submit\" className={s.SearchFormButton}>\n//                     <span className={s.SearchFormButtonLabel}>Search</span>\n//                 </button>\n\n//                 <input\n//                     className={s.SearchFormInput}\n//                     type=\"text\"\n//                     autoComplete=\"off\"\n//                     autoFocus\n//                     placeholder=\"Search images and photos\"\n//                     value={this.state.imageValue}\n//                     onChange={this.handleImageValueChange}\n//                 />\n//             </form>\n//         );\n//     }\n// }\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, tag, largeImageURL }) {\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    });\n\n    const handleKeyDown = event => {\n        if (event.code === 'Escape') {\n            onClose();\n        }\n    };\n\n    const handleOverlayClick = event => {\n        if (event.currentTarget === event.target) {\n            onClose();\n        }\n    };\n\n    return createPortal(\n        <div className={s.Overlay} onClick={handleOverlayClick}>\n            <div className={s.Modal}>\n                <img src={largeImageURL} alt={tag} />\n            </div>\n        </div>,\n        modalRoot,\n    );\n}\n\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    tag: PropTypes.string.isRequired,\n    largeImageURL: PropTypes.string.isRequired,\n};\n\n// OLD CLASS\n// class Modal extends PureComponent {\n//     componentDidMount() {\n//         window.addEventListener('keydown', this.handleKeyDown);\n//     }\n\n//     componentWillUnmount() {\n//         window.removeEventListener('keydown', this.handleKeyDown);\n//     }\n\n//     handleKeyDown = event => {\n//         if (event.code === 'Escape') {\n//             this.props.onClose();\n//         }\n//     };\n\n//     handleOverlayClick = event => {\n//         if (event.currentTarget === event.target) {\n//             this.props.onClose();\n//         }\n//     };\n\n//     render() {\n//         const { tag, largeImageURL } = this.props;\n//         return createPortal(\n//             <div className={s.Overlay} onClick={this.handleOverlayClick}>\n//                 <div className={s.Modal}>\n//                     <img src={largeImageURL} alt={tag} />\n//                 </div>\n//             </div>,\n//             modalRoot,\n//         );\n//     }\n// }\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from '../Modal';\nimport s from './ImageGalleryItem.module.css';\n\nexport default function ImageGalleryItem({ webformatURL, tag, largeImageURL }) {\n    const [showModal, setShowModal] = useState(false);\n\n    const toggleModal = () => {\n        setShowModal(state => !state);\n    };\n\n    return (\n        <>\n            <li className={s.ImageGalleryItem}>\n                <img\n                    src={webformatURL}\n                    alt={tag}\n                    className={s.ImageGalleryItemImage}\n                    onClick={toggleModal}\n                />\n                {showModal && (\n                    <Modal\n                        onClose={toggleModal}\n                        tag={tag}\n                        largeImageURL={largeImageURL}\n                    />\n                )}\n            </li>\n        </>\n    );\n}\n\nImageGalleryItem.propTypes = {\n    webformatURL: PropTypes.string.isRequired,\n    tag: PropTypes.string,\n    largeImageURL: PropTypes.string.isRequired,\n};\n\n// OLD CLASS\n// class ImageGalleryItem extends PureComponent {\n//     state = {\n//         showModal: false,\n//     };\n\n//     toggleModal = () => {\n//         this.setState(({ showModal }) => ({\n//             showModal: !showModal,\n//         }));\n//     };\n\n//     render() {\n//         const { showModal } = this.state;\n//         const { webformatURL, tag, largeImageURL } = this.props;\n\n//         return (\n//             <>\n//                 <li className={s.ImageGalleryItem}>\n//                     <img\n//                         src={webformatURL}\n//                         alt={tag}\n//                         className={s.ImageGalleryItemImage}\n//                         onClick={this.toggleModal}\n//                     />\n//                     {showModal && (\n//                         <Modal\n//                             onClose={this.toggleModal}\n//                             tag={tag}\n//                             largeImageURL={largeImageURL}\n//                         />\n//                     )}\n//                 </li>\n//             </>\n//         );\n//     }\n// }\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport s from './ImageGallery.module.css';\n\nexport default function ImageGallery({ images }) {\n    return (\n        <ul className={s.ImageGallery}>\n            {images.map(({ id, webformatURL, tag, largeImageURL }) => (\n                <ImageGalleryItem\n                    key={id}\n                    webformatURL={webformatURL}\n                    tag={tag}\n                    largeImageURL={largeImageURL}\n                />\n            ))}\n        </ul>\n    );\n}\n\nImageGallery.propTypes = {\n    images: PropTypes.arrayOf(PropTypes.object.isRequired),\n    id: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nexport default function Button({ onClick }) {\n    return (\n        <button onClick={onClick} type=\"button\" className={s.Button}>\n            Load more\n        </button>\n    );\n}\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n","import Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport s from './LoaderSpinner.module.css';\n\nexport default function LoaderSpinner() {\n    return (\n        <Loader\n            type=\"BallTriangle\"\n            color=\"#3f51b5\"\n            height={200}\n            width={200}\n            className={s.loaderSpinner}\n        />\n    );\n}\n\n// OLD CLASS\n// class LoaderSpinner extends PureComponent {\n//     render() {\n//         return (\n//             <Loader\n//                 type=\"BallTriangle\"\n//                 color=\"#3f51b5\"\n//                 height={200}\n//                 width={200}\n//                 className={s.loaderSpinner}\n//             />\n//         );\n//     }\n// }\n","import { useState, useEffect } from 'react';\n\nimport { ToastContainer } from 'react-toastify';\nimport { toast } from 'react-toastify';\nimport pixabayAPI from './servises/pixabay-api';\nimport Searchbar from './components/Searchbar';\nimport SearchForm from './components/SearchForm';\n\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport LoaderSpinner from './components/LoaderSpinner';\n\nconst Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    RESOLVED: 'resolved',\n    REJECTED: 'rejected',\n};\n\nexport default function App() {\n    const [imageValue, setImageValue] = useState('');\n    const [status, setStatus] = useState(Status.IDLE);\n    const [images, setImages] = useState([]);\n    const [page, setPage] = useState(1);\n    const [error, setError] = useState(null);\n\n    const handleFormSubmit = imageValue => {\n        setImageValue(imageValue);\n        setPage(1);\n        setImages([]);\n        setError(null);\n    };\n\n    useEffect(() => {\n        if (imageValue === '') {\n            return;\n        }\n\n        setStatus(Status.PENDING);\n\n        pixabayAPI\n            .fetchImage(imageValue, page)\n            .then(images => {\n                // if (images.hits.length === 0) {\n                //     return Promise.reject(\n                //         new Error(`No images found on request ${imageValue}`),\n                //     );\n                // }\n\n                if (images.hits.length === 0) {\n                    setStatus(Status.IDLE);\n                    return toast.error(\n                        `No images found on request ${imageValue}`,\n                    );\n                }\n\n                setImages(state => [...state, ...images.hits]);\n                setStatus(Status.RESOLVED);\n            })\n            .catch(error => {\n                setError(error);\n                setStatus(Status.REJECTED);\n            })\n            .finally(scroll);\n    }, [imageValue, page]);\n\n    const updatePage = () => {\n        setPage(state => state + 1);\n    };\n\n    const scroll = () => {\n        window.scrollTo({\n            top: document.documentElement.scrollHeight - 1500,\n            behavior: 'smooth',\n        });\n    };\n\n    return (\n        <>\n            <ToastContainer />\n            <Searchbar>\n                <SearchForm onSubmit={handleFormSubmit} />\n            </Searchbar>\n\n            {status === Status.IDLE && (\n                <p className=\"idleText\"> What are we looking for?</p>\n            )}\n\n            {status === Status.PENDING && <LoaderSpinner />}\n\n            {status === Status.RESOLVED && (\n                <>\n                    <ImageGallery images={images} />\n                    <Button onClick={updatePage} />\n                </>\n            )}\n\n            {status === Status.REJECTED && (\n                <p className=\"rejectedText\">{error.message}</p>\n            )}\n        </>\n    );\n}\n\n// images.length > 0 &&\n\n// OLD CLASS\n// class App extends PureComponent {\n//     state = {\n//         imageValue: '',\n//     };\n\n//     handleFormSubmit = imageValue => {\n//         this.setState({ imageValue });\n//     };\n\n//     render() {\n//         return (\n//             <>\n//                 <ToastContainer />\n//                 <Searchbar>\n//                     <SearchForm onSubmit={this.handleFormSubmit} />\n//                 </Searchbar>\n//                 <SearchInfo imageValue={this.state.imageValue} />\n//             </>\n//         );\n//     }\n// }\n\n//+\n\n// OLD CLASS\n// class SearchInfo extends PureComponent {\n//     state = {\n//         status: 'idle',\n//         images: [],\n//         error: null,\n//         page: 1,\n//     };\n\n//     componentDidUpdate(prevProps, prevState) {\n//         const prevImageValue = prevProps.imageValue;\n//         const nextImageValue = this.props.imageValue;\n//         const prevPage = prevState.page;\n//         const nextPage = this.state.page;\n\n//         if (prevImageValue !== nextImageValue) {\n//             this.setState({\n//                 status: 'pending',\n//                 images: [],\n//                 page: 1,\n//             });\n\n//             pixabayAPI\n//                 .fetchImage(nextImageValue, nextPage)\n//                 .then(images => {\n//                     if (images.hits.length === 0) {\n//                         return Promise.reject(\n//                             new Error(\n//                                 `No images found on request ${nextImageValue}`,\n//                             ),\n//                         );\n//                     }\n\n//                     this.setState({\n//                         images: images.hits,\n//                         status: 'resolved',\n//                     });\n//                 })\n//                 .catch(error => this.setState({ error, status: 'rejected' }))\n//                 .finally(this.scroll);\n//         }\n\n//         if (prevPage !== nextPage && prevPage < nextPage) {\n//             this.setState({ status: 'pending' });\n\n//             pixabayAPI\n//                 .fetchImage(nextImageValue, nextPage)\n//                 .then(images => {\n//                     this.setState(prevState => ({\n//                         images: [...prevState.images, ...images.hits],\n//                         status: 'resolved',\n//                     }));\n//                 })\n//                 .catch(error => this.setState({ error, status: 'rejected' }))\n//                 .finally(this.scroll);\n//         }\n//     }\n\n//     updatePage = () => {\n//         this.setState(({ page }) => ({\n//             page: page + 1,\n//         }));\n//     };\n\n//     scroll = () => {\n//         window.scrollTo({\n//             top: document.documentElement.scrollHeight - 1500,\n//             behavior: 'smooth',\n//         });\n//     };\n\n//     render() {\n//         const { status, error, images } = this.state;\n\n//         if (status === 'idle') {\n//             return <p className={s.idleText}>What are we looking for?</p>;\n//         }\n\n//         if (status === 'pending') {\n//             return <LoaderSpinner />;\n//         }\n\n//         if (status === 'resolved') {\n//             return (\n//                 <>\n//                     <ImageGallery images={images} />\n//                     <Button onClick={this.updatePage} />\n//                 </>\n//             );\n//         }\n\n//         if (status === 'rejected') {\n//             return <p className={s.rejectedText}>{error.message}</p>;\n//         }\n//     }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchForm\":\"SearchForm_SearchForm__XQQff\",\"SearchFormButton\":\"SearchForm_SearchFormButton__3iMk_\",\"SearchFormButtonLabel\":\"SearchForm_SearchFormButtonLabel__2vXvI\",\"SearchFormInput\":\"SearchForm_SearchFormInput__3xtRY\"};"],"sourceRoot":""}